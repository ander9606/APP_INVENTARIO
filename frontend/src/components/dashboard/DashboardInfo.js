import { Card } from '../Card.js';

/**
 * Componente de informaci√≥n del sistema para Dashboard
 * Muestra datos generales sobre el sistema de inventario
 */
export const DashboardInfo = {
    /**
     * Renderiza la secci√≥n completa de informaci√≥n del sistema
     * @param {object} datos - Datos opcionales del sistema
     * @returns {string} HTML de la secci√≥n
     */
    render(datos = {}) {
        const {
            version = '1.0.0',
            proposito = 'Gesti√≥n de carpas y materiales',
            caracteristicas = 'Series individuales + Stock general'
        } = datos;

        return `
            <div class="mt-12 max-w-6xl mx-auto">
                ${this.renderInfoCard(version, proposito, caracteristicas)}
            </div>
        `;
    },

    /**
     * Renderiza la tarjeta principal de informaci√≥n
     * @param {string} version - Versi√≥n del sistema
     * @param {string} proposito - Prop√≥sito del sistema
     * @param {string} caracteristicas - Caracter√≠sticas principales
     * @returns {string} HTML de la tarjeta
     */
    renderInfoCard(version, proposito, caracteristicas) {
        return `
            <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-100">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                    ${this.getIconInfo()}
                    Informaci√≥n del Sistema
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    ${Card.renderInfoCard({
                        label: 'Sistema de gesti√≥n de inventario',
                        value: `Versi√≥n ${version}`,
                        icon: 'üì¶',
                        color: 'blue'
                    })}
                    ${Card.renderInfoCard({
                        label: 'Dise√±ado para',
                        value: proposito,
                        icon: 'üéØ',
                        color: 'green'
                    })}
                    ${Card.renderInfoCard({
                        label: 'Caracter√≠sticas',
                        value: caracteristicas,
                        icon: '‚ú®',
                        color: 'purple'
                    })}
                </div>
            </div>
        `;
    },

    /**
     * Renderiza secci√≥n con estad√≠sticas del sistema (futuro)
     * @param {object} stats - Objeto con estad√≠sticas
     * @returns {string} HTML con estad√≠sticas
     */
    renderStats(stats = {}) {
        const {
            totalElementos = 0,
            totalCategorias = 0,
            elementosConSeries = 0,
            elementosSinSeries = 0
        } = stats;

        return `
            <div class="mt-6">
                <h4 class="text-md font-semibold text-gray-700 mb-3">Estad√≠sticas</h4>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                    ${this.renderStatCard('Total Elementos', totalElementos, 'üì¶', 'blue')}
                    ${this.renderStatCard('Categor√≠as', totalCategorias, 'üìÅ', 'green')}
                    ${this.renderStatCard('Con Series', elementosConSeries, 'üî¢', 'purple')}
                    ${this.renderStatCard('Stock General', elementosSinSeries, 'üìä', 'orange')}
                </div>
            </div>
        `;
    },

    /**
     * Renderiza una tarjeta de estad√≠stica peque√±a
     * @param {string} label - Etiqueta
     * @param {number} value - Valor num√©rico
     * @param {string} icon - Emoji
     * @param {string} color - Color del tema
     * @returns {string} HTML de la tarjeta
     */
    renderStatCard(label, value, icon, color) {
        return `
            <div class="bg-white p-3 rounded-lg shadow-sm border border-gray-200 text-center">
                <div class="text-2xl mb-1">${icon}</div>
                <div class="text-2xl font-bold text-gray-800">${value}</div>
                <div class="text-xs text-gray-600">${label}</div>
            </div>
        `;
    },

    /**
     * Obtiene el √≠cono SVG de informaci√≥n
     * @returns {string} SVG del icono
     */
    getIconInfo() {
        return `
            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
        `;
    },

    /**
     * Obtiene el √≠cono SVG de estad√≠sticas
     * @returns {string} SVG del icono
     */
    getIconStats() {
        return `
            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
        `;
    }
};